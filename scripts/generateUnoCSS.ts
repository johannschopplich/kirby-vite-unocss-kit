import { resolve } from "path";
import fg from "fast-glob";
import { readFile, writeFile } from "fs/promises";
import { createGenerator } from "unocss";
import { default as unoConfig, cliConfig } from "../unocss.config";
import { white, green, dim } from "colorette";

const cache = new Map<string, string>();
const isDev = process.env.NODE_ENV !== "production";

async function main() {
  console.log(
    green(
      isDev
        ? "starting UnoCSS in watch mode..."
        : "building UnoCSS for production..."
    )
  );

  const { outDir, watchPaths } = cliConfig;
  const uno = createGenerator({}, unoConfig);
  const files = await fg(watchPaths);

  await Promise.all(
    files.map(async (file) => {
      cache.set(file, await readFile(file, "utf8"));
    })
  );

  const generate = async () => {
    const { css, matched } = await uno.generate([...cache].join("\n"));
    await writeFile(
      resolve(outDir, "uno.css"),
      `/* generated by unocss */\n${css}`
    );

    if (!isDev) {
      console.log(
        `${green("âœ“")} ${[...matched].length} UnoCSS utilities generated.\n`
      );
    }
  };

  if (isDev) {
    const { watch } = await import("chokidar");

    const watcher = watch(files, {
      ignoreInitial: true,
      ignorePermissionErrors: true,
    });

    console.log(
      "watching for changes in " +
        dim(Array.isArray(watchPaths) ? watchPaths.join(", ") : watchPaths)
    );

    watcher.on("all", async (type, file) => {
      console.log(green(`${type}:`) + " " + white(dim(file)));

      if (type.startsWith("unlink")) {
        cache.delete(file);
      } else {
        cache.set(file, await readFile(file, "utf8"));
      }

      await generate();
    });
  }

  await generate();
}

main();
